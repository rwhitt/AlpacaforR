% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Orders.R
\name{orders}
\alias{orders}
\title{Get Orders}
\usage{
orders(
  symbol_id = NULL,
  status = "open",
  limit = NULL,
  after = NULL,
  until = NULL,
  direction = "desc",
  client_order_id = NULL,
  nested = T,
  live = get_live()
)
}
\arguments{
\item{symbol_id}{\code{(character)} Specify symbol, order ID, or client_order_id (must set \code{client_order_id = TRUE}).}

\item{status}{\code{(character)} Order status to be queried. \code{open}, \code{closed} or \code{all}. Defaults to open as a string.}

\item{limit}{\code{(integer)} The maximum number of orders in response. Defaults to 50 and max is 500.}

\item{after}{\code{(Date/character)} Date in YYYY-MM-DD \href{https://www.iso.org/iso-8601-date-and-time-format.html}{(ISO8601 Format)} The response will include only orders submitted \emph{after} this date exclusive as a timestamp object.}

\item{until}{\code{(Date/character)} Date in YYYY-MM-DD \href{https://www.iso.org/iso-8601-date-and-time-format.html}{(ISO8601 Format)} The response will include only orders submitted \emph{before} this date exclusive as a timestamp object.}

\item{direction}{\code{(character)} The chronological order of response based on the submission time. \code{'asc'} or \code{'desc'}. Defaults to \code{desc}.}

\item{client_order_id}{\code{(logical)} Whether \code{symbol_id} is a client_order_id, defaults to \code{NULL (FALSE)}}

\item{nested}{\code{(logical)} If true, the result will roll up multi-leg orders under the legs field of primary order. Default \code{TRUE}.}

\item{live}{\code{(logical)} TRUE / FALSE if you are connecting to a live account. Default to FALSE, so it will use the paper url if nothing was provided.}
}
\value{
Order \code{(tibble)} \href{https://alpaca.markets/docs/api-documentation/api-v2/orders/#order-entity}{Order object} or Array of Order Objects with the following information:
\itemize{
\item{\code{id}}{\code{(character)} order id}
\item{\code{client_order_id}}{\code{(character)} client unique order id}
\item{\code{created_at}}{\code{(POSIXct)} nullable When the order was created}
\item{\code{updated_at}}{\code{(POSIXct)} nullable When the order was updated}
\item{\code{submitted_at}}{\code{(POSIXct)} nullable When the order was submitted}
\item{\code{filled_at}}{\code{(POSIXct)} nullable When the order was filled}
\item{\code{expired_at}}{\code{(POSIXct)} nullable When the order was expired}
\item{\code{canceled_at}}{\code{(POSIXct)} nullable When the order was canceled}
\item{\code{failed_at}}{\code{(POSIXct)} nullable When the order failed}
\item{\code{replaced_at}}{\code{(POSIXct)} nullable When the order was replaced}
\item{\code{replaced_by}}{\code{(character)} id of replacement order}
\item{\code{replaces}}{\code{(character)} id of the replaced order}
\item{\code{asset_id}}{\code{(character)} asset ID}
\item{\code{symbol}}{\code{(character)} Asset symbol}
\item{\code{exchange}}{\code{(character)} Asset exchange}
\item{\code{asset_class}}{\code{(character)} Asset class}
\item{\code{qty}}{\code{(integer)} Ordered quantity}
\item{\code{filled_qty}}{\code{(integer)} Filled quantity}
\item{\code{filled_avg_price}}{\code{(numeric)} Filled average price}
\item{\code{order_class}}{\code{(character)}}
\item{\code{order_type}}{\code{(character)}}
\item{\code{type}}{\code{(character)} Valid values: market, limit, stop, stop_limit}
\item{\code{side}}{\code{(character)} Valid values: buy, sell}
\item{\code{time_in_force}}{\code{(character)} time in force}
\item{\code{limit_price}}{\code{(numeric)} Limit price}
\item{\code{stop_price}}{\code{(numeric)} Stop price}
\item{\code{status}}{\code{(character)} Status of the order}
\item{\code{extended_hours}}{\code{(logical)} If true, eligible for execution outside regular trading hours}.
\item{\code{legs}}{\code{(character)} When querying non-simple order_class orders in a nested style, an array of Order entities associated with this order. Otherwise, null.}
}
}
\description{
The orders API allows a user to monitor, place and cancel their orders with Alpaca. Times are returned as yyyy-mm-dd hh-mm-ss POSIXct, quantity and price as numeric, and all others as a string. See \href{https://alpaca.markets/docs/api-documentation/api-v2/orders#get-a-list-of-orders}{Orders GET}for more details.
}
\examples{
orders(live = FALSE)
orders(status = "all")
# For a specific symbol:
orders("AAPL", status = "all")
}
\seealso{
Other Orders: 
\code{\link{order_submit}()}
}
\concept{Orders}
